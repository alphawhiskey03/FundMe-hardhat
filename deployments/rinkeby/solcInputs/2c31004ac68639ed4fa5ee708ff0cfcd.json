{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"./PriceConverter.sol\";\n\ncontract FundMe {\n    // exmaple 50*10^17=5000000000000000000\n    using PriceConverter for uint256;\n    uint256 public constant MINIMUM_USD = 50 * 1e17; // 1*10 **17\n    // gas price with constant -21,393=0.000406467\n    // has price without constnat- 23,515=0.000408785\n    address[] public funders;\n    mapping(address => uint256) public addressToAmtFunded;\n    address public i_owner;\n\n    // immutable - 21508\n    // non-immutable - 23644\n\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable {\n        require(\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n            \"must be greater than 50 dollars\"\n        );\n        addressToAmtFunded[msg.sender] += msg.value;\n        funders.push(msg.sender);\n    }\n\n    function withdraw() public onlyOwner {\n        for (uint256 i = 0; i < funders.length; i++) {\n            address funder = funders[i];\n            addressToAmtFunded[funder] = 0;\n        }\n        funders = new address[](0);\n\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        // the above function return callSuccess and bytes dataReturned\n        require(callSuccess, \"Transaction failed\");\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == i_owner, \"sender is not the owner\");\n        _;\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    // function getConversionRate() public view return\n    function getPrice(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        (, int price, , , ) = priceFeed.latestRoundData();\n        // price is gonna be just with 8 deciamls so we are including another 10 decimal\n        // so that it will be easy to multiply it with ethPrice\n        return uint256(price * 1e10);\n    }\n\n    function getOriginalPrice(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        (, int price, , , ) = priceFeed.latestRoundData();\n        return uint256(price);\n    }\n\n    function getConversionRate(\n        uint256 ethereumAmt,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n\n        // here ethereum Amt will be with with 18 decimals and ethPrice will be with another 18 decimal\n        // so when we multiply we'll get a total of 36 decimal , to cut it down we are diving with 18 decimal\n        // example (100093600*10^10*50000000000000000)/10^16=5004680000000000000\n\n        uint256 ethAmtInUsed = (ethereumAmt * ethPrice) / 1e16;\n        return ethAmtInUsed;\n    }\n\n    function getDecimal(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        return priceFeed.decimals();\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}